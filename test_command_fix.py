#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se a corre√ß√£o do comando tshark funcionou
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from ferramentas.sniffer.sniffer import PacketSniffer

def test_tshark_command_construction():
    """Testa se o comando tshark est√° sendo constru√≠do corretamente"""
    print("üß™ Testando constru√ß√£o do comando tshark...")
    
    try:
        sniffer = PacketSniffer()
        print("‚úÖ Sniffer criado com sucesso")
        
        # Testa encontrar tshark
        tshark_path = sniffer._find_tshark_path()
        print(f"üîß tshark encontrado em: {tshark_path}")
        
        # Testa constru√ß√£o do comando manualmente
        test_interface = "4"  # Interface Wi-Fi
        test_packets = 3
        
        cmd = [tshark_path, '-i', test_interface, '-c', str(test_packets), '-T', 'json', '-t', 'a', '-l']
        
        print(f"üîß Comando constru√≠do: {' '.join(cmd)}")
        
        # Verifica se n√£o h√° duplica√ß√£o de par√¢metros
        if cmd.count('-c') > 1:
            print("‚ùå ERRO: Par√¢metro -c duplicado!")
            return False
        
        if cmd.count('-T') > 1:
            print("‚ùå ERRO: Par√¢metro -T duplicado!")
            return False
            
        if cmd.count('-i') > 1:
            print("‚ùå ERRO: Par√¢metro -i duplicado!")
            return False
        
        print("‚úÖ Comando constru√≠do corretamente, sem duplica√ß√µes")
        
        # Testa o comando real (s√≥ para ver se formata corretamente)
        import subprocess
        try:
            # Apenas teste de formato (vers√£o), n√£o captura real
            version_cmd = [tshark_path, '--version']
            result = subprocess.run(version_cmd, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("‚úÖ tshark est√° funcionando")
                print(f"   Vers√£o: {result.stdout.split()[1] if result.stdout else 'N/A'}")
            else:
                print(f"‚ö†Ô∏è tshark retornou erro: {result.stderr}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao testar tshark: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_subprocess_capture_method():
    """Testa o m√©todo de captura subprocess especificamente"""
    print("\nüß™ Testando m√©todo _capture_via_subprocess...")
    
    try:
        sniffer = PacketSniffer()
        
        # Testa com poucos pacotes e timeout baixo
        print("üöÄ Executando captura via subprocess (teste)...")
        success = sniffer._capture_via_subprocess(packet_count=2, timeout=15)
        
        if success:
            print("‚úÖ Captura subprocess funcionou!")
            print(f"   Pacotes capturados: {len(sniffer.captured_packets)}")
        else:
            print("‚ö†Ô∏è Captura subprocess n√£o capturou pacotes")
            
        return success
        
    except Exception as e:
        print(f"‚ùå Erro na captura subprocess: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTE DE CORRE√á√ÉO DO COMANDO TSHARK")
    print("=" * 60)
    
    success1 = test_tshark_command_construction()
    success2 = test_subprocess_capture_method()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
    elif success1:
        print("‚ö†Ô∏è COMANDO OK, MAS CAPTURA FALHOU")
    else:
        print("‚ùå TESTES FALHARAM")
    print("=" * 60)
