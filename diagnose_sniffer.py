#!/usr/bin/env python3
"""
Assistente de Diagn√≥stico e Configura√ß√£o do Sniffer
Detecta problemas e fornece solu√ß√µes espec√≠ficas
"""

import sys
import os
import platform
import subprocess
import ctypes

def check_admin():
    """Verifica privil√©gios administrativos"""
    try:
        if platform.system() == "Windows":
            return ctypes.windll.shell32.IsUserAnAdmin() != 0
        else:
            return os.geteuid() == 0
    except:
        return False

def check_npcap():
    """Verifica se Npcap est√° instalado (Windows)"""
    if platform.system() != "Windows":
        return None
    
    npcap_paths = [
        "C:\\Windows\\System32\\Npcap",
        "C:\\Windows\\SysWOW64\\Npcap",
        "C:\\Program Files\\Npcap"
    ]
    
    for path in npcap_paths:
        if os.path.exists(path):
            return True
    return False

def check_wireshark():
    """Verifica se Wireshark/tshark est√° instalado"""
    try:
        result = subprocess.run(['tshark', '--version'], 
                              capture_output=True, timeout=5)
        return result.returncode == 0
    except:
        return False

def check_pyshark():
    """Testa PyShark b√°sico"""
    try:
        import pyshark
        # Teste simples de cria√ß√£o
        capture = pyshark.LiveCapture()
        return True
    except ImportError:
        return False
    except Exception:
        return "installed_but_failed"

def print_solution_windows():
    """Solu√ß√µes espec√≠ficas para Windows"""
    print("üîß SOLU√á√ïES PARA WINDOWS:")
    print("=" * 50)
    
    is_admin = check_admin()
    npcap_installed = check_npcap()
    wireshark_installed = check_wireshark()
    
    if not is_admin:
        print("1Ô∏è‚É£ EXECUTE COMO ADMINISTRADOR (CR√çTICO)")
        print("   ‚Ä¢ Clique com bot√£o direito no PowerShell/CMD")
        print("   ‚Ä¢ Selecione 'Executar como administrador'")
        print("   ‚Ä¢ OU use: python run_admin.py")
        print("")
    
    if not npcap_installed:
        print("2Ô∏è‚É£ INSTALE NPCAP (OBRIGAT√ìRIO)")
        print("   ‚Ä¢ Download: https://nmap.org/npcap/")
        print("   ‚Ä¢ ‚úÖ IMPORTANTE: Marque 'Install Npcap in WinPcap API-compatible Mode'")
        print("   ‚Ä¢ Reinicie o computador ap√≥s instala√ß√£o")
        print("")
    
    if not wireshark_installed:
        print("3Ô∏è‚É£ INSTALE WIRESHARK (RECOMENDADO)")
        print("   ‚Ä¢ Download: https://www.wireshark.org/download.html")
        print("   ‚Ä¢ Inclui tshark para fallback")
        print("   ‚Ä¢ Escolha vers√£o 64-bit")
        print("")
    
    print("4Ô∏è‚É£ ORDEM DE EXECU√á√ÉO:")
    print("   1. Instalar Npcap (se n√£o instalado)")
    print("   2. Reiniciar o sistema")
    print("   3. Executar como Administrador:")
    print("      python run_admin.py")
    print("")

def print_solution_linux():
    """Solu√ß√µes espec√≠ficas para Linux"""
    print("üîß SOLU√á√ïES PARA LINUX:")
    print("=" * 50)
    
    print("1Ô∏è‚É£ INSTALE DEPEND√äNCIAS:")
    print("   sudo apt update")
    print("   sudo apt install wireshark-common tshark")
    print("")
    
    print("2Ô∏è‚É£ CONFIGURE PERMISS√ïES:")
    print("   sudo usermod -a -G wireshark $USER")
    print("   newgrp wireshark")
    print("")
    
    print("3Ô∏è‚É£ EXECUTE COM SUDO:")
    print("   sudo python run_integrated.py")
    print("")

def print_solution_macos():
    """Solu√ß√µes espec√≠ficas para macOS"""
    print("üîß SOLU√á√ïES PARA MACOS:")
    print("=" * 50)
    
    print("1Ô∏è‚É£ INSTALE WIRESHARK:")
    print("   brew install wireshark")
    print("")
    
    print("2Ô∏è‚É£ EXECUTE COM SUDO:")
    print("   sudo python run_integrated.py")
    print("")

def test_pyshark_detailed():
    """Teste detalhado do PyShark"""
    print("üß™ TESTE DETALHADO DO PYSHARK:")
    print("=" * 50)
    
    try:
        import pyshark
        print("‚úÖ PyShark importado com sucesso")
        
        # Teste de cria√ß√£o de captura
        try:
            capture = pyshark.LiveCapture()
            print("‚úÖ LiveCapture criado")
            
            # Teste de interfaces
            try:
                from backend.ferramentas.sniffer.sniffer import get_network_interfaces
                interfaces = get_network_interfaces()
                print(f"‚úÖ Interfaces detectadas: {len(interfaces)}")
                for iface in interfaces[:3]:  # Mostra apenas 3 primeiras
                    print(f"   ‚Ä¢ {iface.get('name', 'Sem nome')}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao detectar interfaces: {e}")
                
        except Exception as e:
            print(f"‚ùå Erro ao criar LiveCapture: {e}")
            return False
            
    except ImportError:
        print("‚ùå PyShark n√£o est√° instalado")
        print("   pip install pyshark")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado no PyShark: {e}")
        return False
    
    return True

def main():
    print("üîç DIAGN√ìSTICO DO SNIFFER DE PACOTES")
    print("=" * 60)
    
    # Informa√ß√µes do sistema
    system = platform.system()
    print(f"üíª Sistema: {system} {platform.release()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"üë§ Admin: {'‚úÖ Sim' if check_admin() else '‚ùå N√£o'}")
    print("")
    
    # Diagn√≥stico espec√≠fico por sistema
    if system == "Windows":
        npcap = check_npcap()
        wireshark = check_wireshark()
        
        print("üìã STATUS WINDOWS:")
        print(f"   Npcap: {'‚úÖ Instalado' if npcap else '‚ùå N√£o instalado'}")
        print(f"   Wireshark: {'‚úÖ Instalado' if wireshark else '‚ùå N√£o instalado'}")
        print("")
        
        if not check_admin() or not npcap:
            print_solution_windows()
            return
            
    elif system == "Linux":
        print_solution_linux()
        return
        
    elif system == "Darwin":
        print_solution_macos()
        return
    
    # Teste PyShark se requisitos b√°sicos atendidos
    print("üß™ TESTANDO PYSHARK...")
    if test_pyshark_detailed():
        print("")
        print("üéâ PYSHARK FUNCIONANDO!")
        print("‚úÖ Voc√™ pode executar:")
        print("   python run_integrated.py")
        print("")
        print("üí° Se ainda houver problemas na captura:")
        print("   ‚Ä¢ Verifique se h√° tr√°fego de rede ativo")
        print("   ‚Ä¢ Tente remover filtros BPF")
        print("   ‚Ä¢ Use interface 'any' em vez de espec√≠fica")
    else:
        print("")
        print("‚ùå PYSHARK COM PROBLEMAS")
        if system == "Windows":
            print_solution_windows()

if __name__ == "__main__":
    main()
