#!/usr/bin/env python3
"""
Teste Abrangente - Sniffer de Pacotes
Script √∫nico para testar todas as funcionalidades do projeto
Substitui todos os outros testes redundantes
"""

import sys
import os
import time
import json
import subprocess
import threading
import argparse
from datetime import datetime

# Adiciona o diret√≥rio backend ao path
backend_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'backend'))
if backend_path not in sys.path:
    sys.path.insert(0, backend_path)

class TestRunner:
    def __init__(self):
        self.results = []
        self.start_time = None
        self.end_time = None
        
    def log_result(self, test_name, status, message="", details=""):
        """Registra resultado de um teste"""
        result = {
            'test': test_name,
            'status': status,
            'message': message,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
        self.results.append(result)
        
        # Exibe resultado imediatamente
        status_icon = "‚úÖ" if status == "PASS" else "‚ùå" if status == "FAIL" else "‚ö†Ô∏è"
        print(f"{status_icon} {test_name}: {message}")
        if details:
            print(f"   {details}")
    
    def run_all_tests(self):
        """Executa todos os testes dispon√≠veis"""
        print("üß™ TESTE ABRANGENTE - SNIFFER DE PACOTES")
        print("=" * 60)
        
        self.start_time = datetime.now()
        
        # Testes de importa√ß√£o
        self.test_imports()
        
        # Testes de depend√™ncias
        self.test_dependencies()
        
        # Testes de privil√©gios
        self.test_privileges()
        
        # Testes de interfaces
        self.test_interfaces()
        
        # Testes de inicializa√ß√£o
        self.test_sniffer_creation()
        
        # Testes de captura (b√°sicos)
        self.test_capture_basic()
        
        # Testes de fallback
        self.test_subprocess_fallback()
        
        # Testes de estrutura do projeto
        self.test_project_structure()
        
        # Testes de backend (opcional)
        if self.should_test_backend():
            self.test_backend_integration()
        
        # Testes de frontend (opcional)
        if self.should_test_frontend():
            self.test_frontend_integration()
        
        self.end_time = datetime.now()
        self.show_summary()
    
    def test_imports(self):
        """Testa todas as importa√ß√µes necess√°rias"""
        print("\nüì¶ TESTE DE IMPORTA√á√ïES")
        print("-" * 30)
        
        # Teste PyShark
        try:
            import pyshark
            self.log_result("Import PyShark", "PASS", "PyShark dispon√≠vel")
        except ImportError as e:
            self.log_result("Import PyShark", "FAIL", "PyShark n√£o dispon√≠vel", str(e))
        
        # Teste m√≥dulo sniffer
        try:
            from ferramentas.sniffer.sniffer import PacketSniffer, get_network_interfaces
            self.log_result("Import Sniffer", "PASS", "M√≥dulo sniffer importado")
        except ImportError as e:
            self.log_result("Import Sniffer", "FAIL", "Falha ao importar sniffer", str(e))
        
        # Teste fun√ß√µes auxiliares
        try:
            from ferramentas.sniffer.sniffer import (
                analyze_http_traffic, analyze_dns_traffic, 
                get_top_talkers, check_admin_privileges
            )
            self.log_result("Import Auxiliares", "PASS", "Fun√ß√µes auxiliares importadas")
        except ImportError as e:
            self.log_result("Import Auxiliares", "FAIL", "Falha ao importar auxiliares", str(e))
    
    def test_dependencies(self):
        """Testa depend√™ncias opcionais"""
        print("\nüîó TESTE DE DEPEND√äNCIAS")
        print("-" * 30)
        
        # Streamlit
        try:
            import streamlit
            self.log_result("Streamlit", "PASS", f"Vers√£o {streamlit.__version__}")
        except ImportError:
            self.log_result("Streamlit", "WARN", "Streamlit n√£o dispon√≠vel")
        
        # Flask
        try:
            import flask
            # Usa m√©todo alternativo para vers√£o (pode n√£o ter __version__ em algumas vers√µes)
            version = getattr(flask, '__version__', 'Desconhecida')
            self.log_result("Flask", "PASS", f"Vers√£o {version}")
        except ImportError:
            self.log_result("Flask", "WARN", "Flask n√£o dispon√≠vel")
        
        # Pandas
        try:
            import pandas
            self.log_result("Pandas", "PASS", f"Vers√£o {pandas.__version__}")
        except ImportError:
            self.log_result("Pandas", "WARN", "Pandas n√£o dispon√≠vel")
        
        # Netifaces (opcional)
        try:
            import netifaces
            self.log_result("Netifaces", "PASS", "Dispon√≠vel")
        except ImportError:
            self.log_result("Netifaces", "WARN", "N√£o dispon√≠vel (usando fallback)")
    
    def test_privileges(self):
        """Testa verifica√ß√£o de privil√©gios"""
        print("\nüîê TESTE DE PRIVIL√âGIOS")
        print("-" * 30)
        
        try:
            from ferramentas.sniffer.sniffer import check_admin_privileges
            is_admin = check_admin_privileges()
            
            if is_admin:
                self.log_result("Privil√©gios", "PASS", "Executando como administrador")
            else:
                self.log_result("Privil√©gios", "WARN", "N√ÉO √© administrador", 
                               "Captura pode falhar")
        except Exception as e:
            self.log_result("Privil√©gios", "FAIL", "Erro ao verificar privil√©gios", str(e))
    
    def test_interfaces(self):
        """Testa detec√ß√£o de interfaces"""
        print("\nüîå TESTE DE INTERFACES")
        print("-" * 30)
        
        try:
            from ferramentas.sniffer.sniffer import get_network_interfaces
            interfaces = get_network_interfaces()
            
            if interfaces:
                self.log_result("Interfaces", "PASS", f"{len(interfaces)} interfaces encontradas")
                for i, iface in enumerate(interfaces[:3]):  # Mostra at√© 3
                    name = iface.get('name', 'N/A')
                    ips = iface.get('ip_addresses', [])
                    ip_info = f"{len(ips)} IPs" if ips else "Sem IPs"
                    print(f"   {i+1}. {name} ({ip_info})")
            else:
                self.log_result("Interfaces", "WARN", "Nenhuma interface detectada")
        except Exception as e:
            self.log_result("Interfaces", "FAIL", "Erro ao detectar interfaces", str(e))
    
    def test_sniffer_creation(self):
        """Testa cria√ß√£o do sniffer"""
        print("\nüî® TESTE DE CRIA√á√ÉO DO SNIFFER")
        print("-" * 30)
        
        try:
            from ferramentas.sniffer.sniffer import PacketSniffer
            
            # Teste cria√ß√£o b√°sica
            sniffer = PacketSniffer()
            self.log_result("Cria√ß√£o B√°sica", "PASS", "Sniffer criado sem par√¢metros")
            
            # Teste com par√¢metros
            sniffer_with_params = PacketSniffer(interface='any', filter_expr='tcp')
            self.log_result("Cria√ß√£o com Par√¢metros", "PASS", "Sniffer com interface e filtro")
            
            # Teste m√©todos b√°sicos
            stats = sniffer.get_statistics()
            self.log_result("M√©todos B√°sicos", "PASS", f"Estat√≠sticas: {stats}")
            
        except Exception as e:
            self.log_result("Cria√ß√£o Sniffer", "FAIL", "Erro ao criar sniffer", str(e))
    
    def test_capture_basic(self):
        """Testa captura b√°sica (sem executar)"""
        print("\nüì° TESTE DE CAPTURA (CONFIGURA√á√ÉO)")
        print("-" * 30)
        
        try:
            from ferramentas.sniffer.sniffer import PacketSniffer
            
            sniffer = PacketSniffer(interface='any')
            
            # Testa se os m√©todos existem
            if hasattr(sniffer, 'start_capture'):
                self.log_result("M√©todo Start", "PASS", "start_capture dispon√≠vel")
            else:
                self.log_result("M√©todo Start", "FAIL", "start_capture n√£o encontrado")
            
            if hasattr(sniffer, 'stop_capture'):
                self.log_result("M√©todo Stop", "PASS", "stop_capture dispon√≠vel")
            else:
                self.log_result("M√©todo Stop", "FAIL", "stop_capture n√£o encontrado")
            
            if hasattr(sniffer, 'get_packets'):
                self.log_result("M√©todo Get Packets", "PASS", "get_packets dispon√≠vel")
            else:
                self.log_result("M√©todo Get Packets", "FAIL", "get_packets n√£o encontrado")
            
        except Exception as e:
            self.log_result("Captura B√°sica", "FAIL", "Erro nos m√©todos de captura", str(e))
    
    def test_subprocess_fallback(self):
        """Testa se o fallback subprocess est√° dispon√≠vel"""
        print("\nüîÑ TESTE DE FALLBACK SUBPROCESS")
        print("-" * 30)
        
        try:
            # Importa o sniffer para usar a nova fun√ß√£o de busca
            from ferramentas.sniffer.sniffer import PacketSniffer
            sniffer = PacketSniffer()
            
            # Usa a nova fun√ß√£o de detec√ß√£o
            tshark_path = sniffer._find_tshark_path()
            print(f"üîç Caminho detectado: {tshark_path}")
            
            # Testa o caminho encontrado
            result = subprocess.run([tshark_path, '--version'], 
                                  capture_output=True, text=True, timeout=5)
            
            if result.returncode == 0:
                version_info = result.stdout.split('\n')[0] if result.stdout else "Vers√£o n√£o detectada"
                self.log_result("TShark", "PASS", f"Dispon√≠vel em: {tshark_path}")
                print(f"   üìã {version_info}")
            else:
                self.log_result("TShark", "FAIL", f"Caminho existe mas falha: {tshark_path}")
                
        except FileNotFoundError:
            self.log_result("TShark", "WARN", "tshark n√£o encontrado", 
                           "Fallback subprocess n√£o dispon√≠vel")
        except Exception as e:
            self.log_result("TShark", "FAIL", "Erro ao testar tshark", str(e))
    
    def test_project_structure(self):
        """Testa estrutura do projeto"""
        print("\nüìÅ TESTE DE ESTRUTURA DO PROJETO")
        print("-" * 30)
        
        required_files = [
            'backend/ferramentas/sniffer/sniffer.py',
            'frontend/app_integrated.py',
            'run_integrated.py',
            'requirements.txt'
        ]
        
        for file_path in required_files:
            if os.path.exists(file_path):
                self.log_result(f"Arquivo {file_path}", "PASS", "Existe")
            else:
                self.log_result(f"Arquivo {file_path}", "FAIL", "N√£o encontrado")
    
    def should_test_backend(self):
        """Verifica se deve testar backend"""
        return os.path.exists('backend/server.py')
    
    def should_test_frontend(self):
        """Verifica se deve testar frontend"""
        return os.path.exists('frontend/app_integrated.py')
    
    def test_backend_integration(self):
        """Testa integra√ß√£o do backend"""
        print("\nüîó TESTE DE INTEGRA√á√ÉO BACKEND")
        print("-" * 30)
        
        try:
            from backend.server import app
            self.log_result("Backend Import", "PASS", "Backend importado")
            
            # Verifica rotas
            with app.test_client() as client:
                response = client.get('/api/hello')
                if response.status_code == 200:
                    self.log_result("Backend API", "PASS", "API responde")
                else:
                    self.log_result("Backend API", "FAIL", f"Status: {response.status_code}")
                    
        except Exception as e:
            self.log_result("Backend Integration", "FAIL", "Erro na integra√ß√£o", str(e))
    
    def test_frontend_integration(self):
        """Testa se o frontend pode ser importado"""
        print("\nüñ•Ô∏è TESTE DE INTEGRA√á√ÉO FRONTEND")
        print("-" * 30)
        
        try:
            # Tenta importar sem executar
            import importlib.util
            spec = importlib.util.spec_from_file_location("app_integrated", "frontend/app_integrated.py")
            self.log_result("Frontend Import", "PASS", "Frontend pode ser importado")
            
        except Exception as e:
            self.log_result("Frontend Import", "FAIL", "Erro ao importar frontend", str(e))
    
    def show_summary(self):
        """Exibe resumo dos testes"""
        print("\n" + "=" * 60)
        print("üìä RESUMO DOS TESTES")
        print("=" * 60)
        
        total_tests = len(self.results)
        passed = len([r for r in self.results if r['status'] == 'PASS'])
        failed = len([r for r in self.results if r['status'] == 'FAIL'])
        warnings = len([r for r in self.results if r['status'] == 'WARN'])
        
        duration = (self.end_time - self.start_time).total_seconds() if self.end_time and self.start_time else 0
        
        print(f"üïê Dura√ß√£o: {duration:.2f}s")
        print(f"üìä Total: {total_tests} testes")
        print(f"‚úÖ Passou: {passed}")
        print(f"‚ùå Falhou: {failed}")
        print(f"‚ö†Ô∏è Avisos: {warnings}")
        
        if failed == 0:
            print("\nüéâ TODOS OS TESTES CR√çTICOS PASSARAM!")
            print("‚úÖ O projeto est√° pronto para uso")
        else:
            print(f"\n‚ö†Ô∏è {failed} TESTES FALHARAM")
            print("‚ùå Verifique os erros acima")
        
        # Mostra testes que falharam
        if failed > 0:
            print("\nüîç TESTES QUE FALHARAM:")
            for result in self.results:
                if result['status'] == 'FAIL':
                    print(f"   ‚ùå {result['test']}: {result['message']}")
                    if result['details']:
                        print(f"      {result['details']}")
    
    def export_results(self, filename="test_results.json"):
        """Exporta resultados para arquivo JSON"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'summary': {
                        'total_tests': len(self.results),
                        'passed': len([r for r in self.results if r['status'] == 'PASS']),
                        'failed': len([r for r in self.results if r['status'] == 'FAIL']),
                        'warnings': len([r for r in self.results if r['status'] == 'WARN']),
                        'duration': (self.end_time - self.start_time).total_seconds() if self.end_time and self.start_time else 0
                    },
                    'results': self.results
                }, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultados salvos em: {filename}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar resultados: {e}")

def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description='Teste abrangente do sniffer de pacotes')
    parser.add_argument('--export', action='store_true', 
                       help='Exporta resultados para JSON')
    parser.add_argument('--output', default='test_results.json',
                       help='Arquivo de sa√≠da para resultados')
    
    args = parser.parse_args()
    
    # Executa testes
    runner = TestRunner()
    runner.run_all_tests()
    
    # Exporta se solicitado
    if args.export:
        runner.export_results(args.output)

if __name__ == "__main__":
    main()
